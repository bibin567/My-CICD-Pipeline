name: Main
on: push

env:
  AWS_REGION: us-east-1

jobs:
  packer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Packer Template (Optional)
        uses: hashicorp/packer-github-actions@master
        with:
          command: init

      - name: Validate Template (Optional)
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -syntax-only
          target: GitWebsite.pkr.hcl

      - name: Build Artifact
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: "-var 'ssh_private_key_file=${{ secrets.SSH_PRIVATE_KEY_PATH }}'"
          target: GitWebsite.pkr.hcl
        env:
            PACKER_LOG: 1
          
  terraform:
    runs-on: ubuntu-latest
    needs:
      - packer
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Apply
        run: terraform apply -auto-approve
        if: github.ref == 'refs/heads/main'

      - name: Output EC2 Public IPs
        run: |
          instance_ids=$(terraform output -json instances | jq -r '.[].id')
          aws ec2 describe-instances --instance-ids $instance_ids --query 'Reservations[*].Instances[*].PublicIpAddress' --output text

  ansible:
    runs-on: ubuntu-latest
    needs:
      - terraform
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Set up SSH private key for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

      - name: Run Ansible playbook
        run: |
          ansible-playbook -i ${{ secrets.ANSIBLE_INVENTORY }} --private-key ~/.ssh/id_ed25519 playbook_ansible_autoscaling.yml
